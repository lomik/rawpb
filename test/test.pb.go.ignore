// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: test.proto

package test

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnumType int32

const (
	EnumType_ENUM_TYPE_UNSPECIFIED EnumType = 0
	EnumType_ENUM_TYPE_VALUE1      EnumType = 1
	EnumType_ENUM_TYPE_VALUE2      EnumType = 2
	EnumType_ENUM_TYPE_VALUE3      EnumType = 3
)

// Enum value maps for EnumType.
var (
	EnumType_name = map[int32]string{
		0: "ENUM_TYPE_UNSPECIFIED",
		1: "ENUM_TYPE_VALUE1",
		2: "ENUM_TYPE_VALUE2",
		3: "ENUM_TYPE_VALUE3",
	}
	EnumType_value = map[string]int32{
		"ENUM_TYPE_UNSPECIFIED": 0,
		"ENUM_TYPE_VALUE1":      1,
		"ENUM_TYPE_VALUE2":      2,
		"ENUM_TYPE_VALUE3":      3,
	}
)

func (x EnumType) Enum() *EnumType {
	p := new(EnumType)
	*p = x
	return p
}

func (x EnumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumType) Descriptor() protoreflect.EnumDescriptor {
	return file_test_proto_enumTypes[0].Descriptor()
}

func (EnumType) Type() protoreflect.EnumType {
	return &file_test_proto_enumTypes[0]
}

func (x EnumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumType.Descriptor instead.
func (EnumType) EnumDescriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0}
}

type Main struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SimpleInt32          int32            `protobuf:"varint,1,opt,name=simple_int32,json=simpleInt32,proto3" json:"simple_int32,omitempty"`
	SimpleInt64          int64            `protobuf:"varint,2,opt,name=simple_int64,json=simpleInt64,proto3" json:"simple_int64,omitempty"`
	SimpleUint32         uint32           `protobuf:"varint,3,opt,name=simple_uint32,json=simpleUint32,proto3" json:"simple_uint32,omitempty"`
	SimpleUint64         uint64           `protobuf:"varint,4,opt,name=simple_uint64,json=simpleUint64,proto3" json:"simple_uint64,omitempty"`
	SimpleSint32         int32            `protobuf:"zigzag32,5,opt,name=simple_sint32,json=simpleSint32,proto3" json:"simple_sint32,omitempty"`
	SimpleSint64         int64            `protobuf:"zigzag64,6,opt,name=simple_sint64,json=simpleSint64,proto3" json:"simple_sint64,omitempty"`
	SimpleBool           bool             `protobuf:"varint,7,opt,name=simple_bool,json=simpleBool,proto3" json:"simple_bool,omitempty"`
	SimpleEnum           EnumType         `protobuf:"varint,8,opt,name=simple_enum,json=simpleEnum,proto3,enum=test.EnumType" json:"simple_enum,omitempty"`
	SimpleFixed64        uint64           `protobuf:"fixed64,9,opt,name=simple_fixed64,json=simpleFixed64,proto3" json:"simple_fixed64,omitempty"`
	SimpleSfixed64       int64            `protobuf:"fixed64,10,opt,name=simple_sfixed64,json=simpleSfixed64,proto3" json:"simple_sfixed64,omitempty"`
	SimpleDouble         float64          `protobuf:"fixed64,11,opt,name=simple_double,json=simpleDouble,proto3" json:"simple_double,omitempty"`
	SimpleString         string           `protobuf:"bytes,12,opt,name=simple_string,json=simpleString,proto3" json:"simple_string,omitempty"`
	SimpleBytes          []byte           `protobuf:"bytes,13,opt,name=simple_bytes,json=simpleBytes,proto3" json:"simple_bytes,omitempty"`
	SimpleFixed32        uint32           `protobuf:"fixed32,14,opt,name=simple_fixed32,json=simpleFixed32,proto3" json:"simple_fixed32,omitempty"`
	SimpleSfixed32       int32            `protobuf:"fixed32,15,opt,name=simple_sfixed32,json=simpleSfixed32,proto3" json:"simple_sfixed32,omitempty"`
	SimpleFloat          float32          `protobuf:"fixed32,16,opt,name=simple_float,json=simpleFloat,proto3" json:"simple_float,omitempty"`
	Sub                  *Main_Submessage `protobuf:"bytes,17,opt,name=sub,proto3" json:"sub,omitempty"`
	RepeatedUint32       []uint32         `protobuf:"varint,18,rep,name=repeated_uint32,json=repeatedUint32,proto3" json:"repeated_uint32,omitempty"`
	RepeatedString       []string         `protobuf:"bytes,19,rep,name=repeated_string,json=repeatedString,proto3" json:"repeated_string,omitempty"`
	RepeatedPackedUint32 []uint32         `protobuf:"varint,20,rep,packed,name=repeated_packed_uint32,json=repeatedPackedUint32,proto3" json:"repeated_packed_uint32,omitempty"`
	RepeatedPackedFloat  []float32        `protobuf:"fixed32,21,rep,packed,name=repeated_packed_float,json=repeatedPackedFloat,proto3" json:"repeated_packed_float,omitempty"`
	RepeatedPackedDouble []float64        `protobuf:"fixed64,22,rep,packed,name=repeated_packed_double,json=repeatedPackedDouble,proto3" json:"repeated_packed_double,omitempty"`
	BigNumberVarint      uint64           `protobuf:"varint,12313,opt,name=big_number_varint,json=bigNumberVarint,proto3" json:"big_number_varint,omitempty"`
	BigNumberFixed32     uint32           `protobuf:"fixed32,12314,opt,name=big_number_fixed32,json=bigNumberFixed32,proto3" json:"big_number_fixed32,omitempty"`
	BigNumberFixed64     uint64           `protobuf:"fixed64,12315,opt,name=big_number_fixed64,json=bigNumberFixed64,proto3" json:"big_number_fixed64,omitempty"`
	BigNumberString      string           `protobuf:"bytes,12316,opt,name=big_number_string,json=bigNumberString,proto3" json:"big_number_string,omitempty"`
}

func (x *Main) Reset() {
	*x = Main{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Main) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Main) ProtoMessage() {}

func (x *Main) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Main.ProtoReflect.Descriptor instead.
func (*Main) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0}
}

func (x *Main) GetSimpleInt32() int32 {
	if x != nil {
		return x.SimpleInt32
	}
	return 0
}

func (x *Main) GetSimpleInt64() int64 {
	if x != nil {
		return x.SimpleInt64
	}
	return 0
}

func (x *Main) GetSimpleUint32() uint32 {
	if x != nil {
		return x.SimpleUint32
	}
	return 0
}

func (x *Main) GetSimpleUint64() uint64 {
	if x != nil {
		return x.SimpleUint64
	}
	return 0
}

func (x *Main) GetSimpleSint32() int32 {
	if x != nil {
		return x.SimpleSint32
	}
	return 0
}

func (x *Main) GetSimpleSint64() int64 {
	if x != nil {
		return x.SimpleSint64
	}
	return 0
}

func (x *Main) GetSimpleBool() bool {
	if x != nil {
		return x.SimpleBool
	}
	return false
}

func (x *Main) GetSimpleEnum() EnumType {
	if x != nil {
		return x.SimpleEnum
	}
	return EnumType_ENUM_TYPE_UNSPECIFIED
}

func (x *Main) GetSimpleFixed64() uint64 {
	if x != nil {
		return x.SimpleFixed64
	}
	return 0
}

func (x *Main) GetSimpleSfixed64() int64 {
	if x != nil {
		return x.SimpleSfixed64
	}
	return 0
}

func (x *Main) GetSimpleDouble() float64 {
	if x != nil {
		return x.SimpleDouble
	}
	return 0
}

func (x *Main) GetSimpleString() string {
	if x != nil {
		return x.SimpleString
	}
	return ""
}

func (x *Main) GetSimpleBytes() []byte {
	if x != nil {
		return x.SimpleBytes
	}
	return nil
}

func (x *Main) GetSimpleFixed32() uint32 {
	if x != nil {
		return x.SimpleFixed32
	}
	return 0
}

func (x *Main) GetSimpleSfixed32() int32 {
	if x != nil {
		return x.SimpleSfixed32
	}
	return 0
}

func (x *Main) GetSimpleFloat() float32 {
	if x != nil {
		return x.SimpleFloat
	}
	return 0
}

func (x *Main) GetSub() *Main_Submessage {
	if x != nil {
		return x.Sub
	}
	return nil
}

func (x *Main) GetRepeatedUint32() []uint32 {
	if x != nil {
		return x.RepeatedUint32
	}
	return nil
}

func (x *Main) GetRepeatedString() []string {
	if x != nil {
		return x.RepeatedString
	}
	return nil
}

func (x *Main) GetRepeatedPackedUint32() []uint32 {
	if x != nil {
		return x.RepeatedPackedUint32
	}
	return nil
}

func (x *Main) GetRepeatedPackedFloat() []float32 {
	if x != nil {
		return x.RepeatedPackedFloat
	}
	return nil
}

func (x *Main) GetRepeatedPackedDouble() []float64 {
	if x != nil {
		return x.RepeatedPackedDouble
	}
	return nil
}

func (x *Main) GetBigNumberVarint() uint64 {
	if x != nil {
		return x.BigNumberVarint
	}
	return 0
}

func (x *Main) GetBigNumberFixed32() uint32 {
	if x != nil {
		return x.BigNumberFixed32
	}
	return 0
}

func (x *Main) GetBigNumberFixed64() uint64 {
	if x != nil {
		return x.BigNumberFixed64
	}
	return 0
}

func (x *Main) GetBigNumberString() string {
	if x != nil {
		return x.BigNumberString
	}
	return ""
}

type Main_Submessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number string   `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	Type   EnumType `protobuf:"varint,2,opt,name=type,proto3,enum=test.EnumType" json:"type,omitempty"`
}

func (x *Main_Submessage) Reset() {
	*x = Main_Submessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Main_Submessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Main_Submessage) ProtoMessage() {}

func (x *Main_Submessage) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Main_Submessage.ProtoReflect.Descriptor instead.
func (*Main_Submessage) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Main_Submessage) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *Main_Submessage) GetType() EnumType {
	if x != nil {
		return x.Type
	}
	return EnumType_ENUM_TYPE_UNSPECIFIED
}

var File_test_proto protoreflect.FileDescriptor

var file_test_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x74, 0x65,
	0x73, 0x74, 0x22, 0x87, 0x09, 0x0a, 0x04, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x0c, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0c, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x2f, 0x0a, 0x0b, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0d, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x10, 0x52, 0x0e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0d, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0f, 0x52, 0x0e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x27, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x69, 0x6e,
	0x2e, 0x53, 0x75, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x73, 0x75, 0x62,
	0x12, 0x2b, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x00, 0x52, 0x0e, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x2b, 0x0a,
	0x0f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x10, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x13, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x16,
	0x20, 0x03, 0x28, 0x01, 0x52, 0x14, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x64, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x69,
	0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x6e, 0x74, 0x18,
	0x99, 0x60, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x62, 0x69, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x56, 0x61, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x62, 0x69, 0x67, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x9a, 0x60,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x10, 0x62, 0x69, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x2d, 0x0a, 0x12, 0x62, 0x69, 0x67, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x9b, 0x60, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x10, 0x62, 0x69, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x69, 0x67, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x9c, 0x60, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x62, 0x69, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x1a, 0x48, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x2a, 0x67, 0x0a, 0x08,
	0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x32, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x33, 0x10, 0x03, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x75, 0x74, 0x6f, 0x2d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2f, 0x72, 0x61, 0x77, 0x70, 0x62, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_test_proto_rawDescOnce sync.Once
	file_test_proto_rawDescData = file_test_proto_rawDesc
)

func file_test_proto_rawDescGZIP() []byte {
	file_test_proto_rawDescOnce.Do(func() {
		file_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_test_proto_rawDescData)
	})
	return file_test_proto_rawDescData
}

var file_test_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_test_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_test_proto_goTypes = []interface{}{
	(EnumType)(0),           // 0: test.EnumType
	(*Main)(nil),            // 1: test.Main
	(*Main_Submessage)(nil), // 2: test.Main.Submessage
}
var file_test_proto_depIdxs = []int32{
	0, // 0: test.Main.simple_enum:type_name -> test.EnumType
	2, // 1: test.Main.sub:type_name -> test.Main.Submessage
	0, // 2: test.Main.Submessage.type:type_name -> test.EnumType
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_test_proto_init() }
func file_test_proto_init() {
	if File_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Main); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Main_Submessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_test_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_test_proto_goTypes,
		DependencyIndexes: file_test_proto_depIdxs,
		EnumInfos:         file_test_proto_enumTypes,
		MessageInfos:      file_test_proto_msgTypes,
	}.Build()
	File_test_proto = out.File
	file_test_proto_rawDesc = nil
	file_test_proto_goTypes = nil
	file_test_proto_depIdxs = nil
}
