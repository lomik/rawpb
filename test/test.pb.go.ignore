// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: test.proto

package test

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EnumType int32

const (
	EnumType_ENUM_TYPE_UNSPECIFIED EnumType = 0
	EnumType_ENUM_TYPE_VALUE1      EnumType = 1
	EnumType_ENUM_TYPE_VALUE2      EnumType = 2
	EnumType_ENUM_TYPE_VALUE3      EnumType = 3
)

var EnumType_name = map[int32]string{
	0: "ENUM_TYPE_UNSPECIFIED",
	1: "ENUM_TYPE_VALUE1",
	2: "ENUM_TYPE_VALUE2",
	3: "ENUM_TYPE_VALUE3",
}

var EnumType_value = map[string]int32{
	"ENUM_TYPE_UNSPECIFIED": 0,
	"ENUM_TYPE_VALUE1":      1,
	"ENUM_TYPE_VALUE2":      2,
	"ENUM_TYPE_VALUE3":      3,
}

func (x EnumType) String() string {
	return proto.EnumName(EnumType_name, int32(x))
}

func (EnumType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0}
}

type Main struct {
	SimpleInt32          int32            `protobuf:"varint,1,opt,name=simple_int32,json=simpleInt32,proto3" json:"simple_int32,omitempty"`
	SimpleInt64          int64            `protobuf:"varint,2,opt,name=simple_int64,json=simpleInt64,proto3" json:"simple_int64,omitempty"`
	SimpleUint32         uint32           `protobuf:"varint,3,opt,name=simple_uint32,json=simpleUint32,proto3" json:"simple_uint32,omitempty"`
	SimpleUint64         uint64           `protobuf:"varint,4,opt,name=simple_uint64,json=simpleUint64,proto3" json:"simple_uint64,omitempty"`
	SimpleSint32         int32            `protobuf:"zigzag32,5,opt,name=simple_sint32,json=simpleSint32,proto3" json:"simple_sint32,omitempty"`
	SimpleSint64         int64            `protobuf:"zigzag64,6,opt,name=simple_sint64,json=simpleSint64,proto3" json:"simple_sint64,omitempty"`
	SimpleBool           bool             `protobuf:"varint,7,opt,name=simple_bool,json=simpleBool,proto3" json:"simple_bool,omitempty"`
	SimpleEnum           EnumType         `protobuf:"varint,8,opt,name=simple_enum,json=simpleEnum,proto3,enum=test.EnumType" json:"simple_enum,omitempty"`
	SimpleFixed64        uint64           `protobuf:"fixed64,9,opt,name=simple_fixed64,json=simpleFixed64,proto3" json:"simple_fixed64,omitempty"`
	SimpleSfixed64       int64            `protobuf:"fixed64,10,opt,name=simple_sfixed64,json=simpleSfixed64,proto3" json:"simple_sfixed64,omitempty"`
	SimpleDouble         float64          `protobuf:"fixed64,11,opt,name=simple_double,json=simpleDouble,proto3" json:"simple_double,omitempty"`
	SimpleString         string           `protobuf:"bytes,12,opt,name=simple_string,json=simpleString,proto3" json:"simple_string,omitempty"`
	SimpleBytes          []byte           `protobuf:"bytes,13,opt,name=simple_bytes,json=simpleBytes,proto3" json:"simple_bytes,omitempty"`
	SimpleFixed32        uint32           `protobuf:"fixed32,14,opt,name=simple_fixed32,json=simpleFixed32,proto3" json:"simple_fixed32,omitempty"`
	SimpleSfixed32       int32            `protobuf:"fixed32,15,opt,name=simple_sfixed32,json=simpleSfixed32,proto3" json:"simple_sfixed32,omitempty"`
	SimpleFloat          float32          `protobuf:"fixed32,16,opt,name=simple_float,json=simpleFloat,proto3" json:"simple_float,omitempty"`
	Sub                  *Main_Submessage `protobuf:"bytes,17,opt,name=sub,proto3" json:"sub,omitempty"`
	RepeatedUint32       []uint32         `protobuf:"varint,18,rep,name=repeated_uint32,json=repeatedUint32,proto3" json:"repeated_uint32,omitempty"`
	RepeatedString       []string         `protobuf:"bytes,19,rep,name=repeated_string,json=repeatedString,proto3" json:"repeated_string,omitempty"`
	RepeatedPackedUint32 []uint32         `protobuf:"varint,20,rep,packed,name=repeated_packed_uint32,json=repeatedPackedUint32,proto3" json:"repeated_packed_uint32,omitempty"`
	RepeatedPackedFloat  []float32        `protobuf:"fixed32,21,rep,packed,name=repeated_packed_float,json=repeatedPackedFloat,proto3" json:"repeated_packed_float,omitempty"`
	RepeatedPackedDouble []float64        `protobuf:"fixed64,22,rep,packed,name=repeated_packed_double,json=repeatedPackedDouble,proto3" json:"repeated_packed_double,omitempty"`
	BigNumberVarint      uint64           `protobuf:"varint,12313,opt,name=big_number_varint,json=bigNumberVarint,proto3" json:"big_number_varint,omitempty"`
	BigNumberFixed32     uint32           `protobuf:"fixed32,12314,opt,name=big_number_fixed32,json=bigNumberFixed32,proto3" json:"big_number_fixed32,omitempty"`
	BigNumberFixed64     uint64           `protobuf:"fixed64,12315,opt,name=big_number_fixed64,json=bigNumberFixed64,proto3" json:"big_number_fixed64,omitempty"`
	BigNumberString      string           `protobuf:"bytes,12316,opt,name=big_number_string,json=bigNumberString,proto3" json:"big_number_string,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Main) Reset()         { *m = Main{} }
func (m *Main) String() string { return proto.CompactTextString(m) }
func (*Main) ProtoMessage()    {}
func (*Main) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0}
}
func (m *Main) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Main) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Main.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Main) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Main.Merge(m, src)
}
func (m *Main) XXX_Size() int {
	return m.Size()
}
func (m *Main) XXX_DiscardUnknown() {
	xxx_messageInfo_Main.DiscardUnknown(m)
}

var xxx_messageInfo_Main proto.InternalMessageInfo

func (m *Main) GetSimpleInt32() int32 {
	if m != nil {
		return m.SimpleInt32
	}
	return 0
}

func (m *Main) GetSimpleInt64() int64 {
	if m != nil {
		return m.SimpleInt64
	}
	return 0
}

func (m *Main) GetSimpleUint32() uint32 {
	if m != nil {
		return m.SimpleUint32
	}
	return 0
}

func (m *Main) GetSimpleUint64() uint64 {
	if m != nil {
		return m.SimpleUint64
	}
	return 0
}

func (m *Main) GetSimpleSint32() int32 {
	if m != nil {
		return m.SimpleSint32
	}
	return 0
}

func (m *Main) GetSimpleSint64() int64 {
	if m != nil {
		return m.SimpleSint64
	}
	return 0
}

func (m *Main) GetSimpleBool() bool {
	if m != nil {
		return m.SimpleBool
	}
	return false
}

func (m *Main) GetSimpleEnum() EnumType {
	if m != nil {
		return m.SimpleEnum
	}
	return EnumType_ENUM_TYPE_UNSPECIFIED
}

func (m *Main) GetSimpleFixed64() uint64 {
	if m != nil {
		return m.SimpleFixed64
	}
	return 0
}

func (m *Main) GetSimpleSfixed64() int64 {
	if m != nil {
		return m.SimpleSfixed64
	}
	return 0
}

func (m *Main) GetSimpleDouble() float64 {
	if m != nil {
		return m.SimpleDouble
	}
	return 0
}

func (m *Main) GetSimpleString() string {
	if m != nil {
		return m.SimpleString
	}
	return ""
}

func (m *Main) GetSimpleBytes() []byte {
	if m != nil {
		return m.SimpleBytes
	}
	return nil
}

func (m *Main) GetSimpleFixed32() uint32 {
	if m != nil {
		return m.SimpleFixed32
	}
	return 0
}

func (m *Main) GetSimpleSfixed32() int32 {
	if m != nil {
		return m.SimpleSfixed32
	}
	return 0
}

func (m *Main) GetSimpleFloat() float32 {
	if m != nil {
		return m.SimpleFloat
	}
	return 0
}

func (m *Main) GetSub() *Main_Submessage {
	if m != nil {
		return m.Sub
	}
	return nil
}

func (m *Main) GetRepeatedUint32() []uint32 {
	if m != nil {
		return m.RepeatedUint32
	}
	return nil
}

func (m *Main) GetRepeatedString() []string {
	if m != nil {
		return m.RepeatedString
	}
	return nil
}

func (m *Main) GetRepeatedPackedUint32() []uint32 {
	if m != nil {
		return m.RepeatedPackedUint32
	}
	return nil
}

func (m *Main) GetRepeatedPackedFloat() []float32 {
	if m != nil {
		return m.RepeatedPackedFloat
	}
	return nil
}

func (m *Main) GetRepeatedPackedDouble() []float64 {
	if m != nil {
		return m.RepeatedPackedDouble
	}
	return nil
}

func (m *Main) GetBigNumberVarint() uint64 {
	if m != nil {
		return m.BigNumberVarint
	}
	return 0
}

func (m *Main) GetBigNumberFixed32() uint32 {
	if m != nil {
		return m.BigNumberFixed32
	}
	return 0
}

func (m *Main) GetBigNumberFixed64() uint64 {
	if m != nil {
		return m.BigNumberFixed64
	}
	return 0
}

func (m *Main) GetBigNumberString() string {
	if m != nil {
		return m.BigNumberString
	}
	return ""
}

type Main_Submessage struct {
	Number               string                       `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	Type                 EnumType                     `protobuf:"varint,2,opt,name=type,proto3,enum=test.EnumType" json:"type,omitempty"`
	Sub2                 *Main_Submessage_Submessage2 `protobuf:"bytes,3,opt,name=sub2,proto3" json:"sub2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *Main_Submessage) Reset()         { *m = Main_Submessage{} }
func (m *Main_Submessage) String() string { return proto.CompactTextString(m) }
func (*Main_Submessage) ProtoMessage()    {}
func (*Main_Submessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0, 0}
}
func (m *Main_Submessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Main_Submessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Main_Submessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Main_Submessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Main_Submessage.Merge(m, src)
}
func (m *Main_Submessage) XXX_Size() int {
	return m.Size()
}
func (m *Main_Submessage) XXX_DiscardUnknown() {
	xxx_messageInfo_Main_Submessage.DiscardUnknown(m)
}

var xxx_messageInfo_Main_Submessage proto.InternalMessageInfo

func (m *Main_Submessage) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *Main_Submessage) GetType() EnumType {
	if m != nil {
		return m.Type
	}
	return EnumType_ENUM_TYPE_UNSPECIFIED
}

func (m *Main_Submessage) GetSub2() *Main_Submessage_Submessage2 {
	if m != nil {
		return m.Sub2
	}
	return nil
}

type Main_Submessage_Submessage2 struct {
	Value                uint32   `protobuf:"varint,28,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Main_Submessage_Submessage2) Reset()         { *m = Main_Submessage_Submessage2{} }
func (m *Main_Submessage_Submessage2) String() string { return proto.CompactTextString(m) }
func (*Main_Submessage_Submessage2) ProtoMessage()    {}
func (*Main_Submessage_Submessage2) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0, 0, 0}
}
func (m *Main_Submessage_Submessage2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Main_Submessage_Submessage2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Main_Submessage_Submessage2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Main_Submessage_Submessage2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Main_Submessage_Submessage2.Merge(m, src)
}
func (m *Main_Submessage_Submessage2) XXX_Size() int {
	return m.Size()
}
func (m *Main_Submessage_Submessage2) XXX_DiscardUnknown() {
	xxx_messageInfo_Main_Submessage_Submessage2.DiscardUnknown(m)
}

var xxx_messageInfo_Main_Submessage_Submessage2 proto.InternalMessageInfo

func (m *Main_Submessage_Submessage2) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterEnum("test.EnumType", EnumType_name, EnumType_value)
	proto.RegisterType((*Main)(nil), "test.Main")
	proto.RegisterType((*Main_Submessage)(nil), "test.Main.Submessage")
	proto.RegisterType((*Main_Submessage_Submessage2)(nil), "test.Main.Submessage.Submessage2")
}

func init() { proto.RegisterFile("test.proto", fileDescriptor_c161fcfdc0c3ff1e) }

var fileDescriptor_c161fcfdc0c3ff1e = []byte{
	// 701 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x54, 0xdb, 0x4e, 0xdb, 0x4c,
	0x10, 0x66, 0xe3, 0x10, 0xc8, 0x86, 0x24, 0x66, 0x49, 0xd0, 0xfe, 0xe8, 0x57, 0xba, 0x80, 0x2a,
	0x56, 0x45, 0x24, 0xaa, 0x63, 0x72, 0xdf, 0x94, 0x20, 0x21, 0x15, 0x84, 0x1c, 0x82, 0xd4, 0xde,
	0x24, 0x36, 0x2c, 0xa9, 0xd5, 0xf8, 0x20, 0x1f, 0x68, 0x79, 0x93, 0x9e, 0x2e, 0xfb, 0x30, 0xbd,
	0xec, 0x23, 0x54, 0xb4, 0x0f, 0x52, 0x79, 0xbd, 0x4e, 0x6c, 0x93, 0x3b, 0xef, 0x37, 0xdf, 0xcc,
	0x7c, 0x73, 0xf0, 0x40, 0x18, 0x30, 0x3f, 0x68, 0xbb, 0x9e, 0x13, 0x38, 0xa8, 0x18, 0x7d, 0xef,
	0xfd, 0x2d, 0xc3, 0xe2, 0xb9, 0x6e, 0xda, 0x68, 0x17, 0x6e, 0xf8, 0xa6, 0xe5, 0xce, 0xd8, 0xd8,
	0xb4, 0x83, 0xae, 0x82, 0x01, 0x01, 0x74, 0x55, 0xab, 0xc4, 0xd8, 0x59, 0x04, 0x65, 0x29, 0x3d,
	0x15, 0x17, 0x08, 0xa0, 0x52, 0x8a, 0xd2, 0x53, 0xd1, 0x3e, 0xac, 0x0a, 0x4a, 0x18, 0x87, 0x91,
	0x08, 0xa0, 0x55, 0x4d, 0xf8, 0x8d, 0x38, 0x96, 0x23, 0xf5, 0x54, 0x5c, 0x24, 0x80, 0x16, 0xd3,
	0xa4, 0x4c, 0x24, 0x3f, 0x8e, 0xb4, 0x4a, 0x00, 0xdd, 0x4c, 0x48, 0xc3, 0x7c, 0x24, 0x3f, 0x8e,
	0x54, 0x22, 0x80, 0xa2, 0x34, 0xa9, 0xa7, 0xa2, 0x67, 0x50, 0x48, 0x1c, 0x1b, 0x8e, 0x33, 0xc3,
	0x6b, 0x04, 0xd0, 0x75, 0x0d, 0xc6, 0x50, 0xdf, 0x71, 0x66, 0xa8, 0x33, 0x27, 0x30, 0x3b, 0xb4,
	0xf0, 0x3a, 0x01, 0xb4, 0xa6, 0xd4, 0xda, 0xbc, 0x57, 0x03, 0x3b, 0xb4, 0xae, 0x1e, 0x5c, 0x96,
	0x38, 0x44, 0x6f, 0xf4, 0x1c, 0xd6, 0x84, 0xc3, 0x9d, 0xf9, 0x89, 0xdd, 0xf6, 0x54, 0x5c, 0x26,
	0x80, 0x96, 0x34, 0x21, 0xe6, 0x34, 0x06, 0xd1, 0x01, 0xac, 0x27, 0xea, 0x12, 0x1e, 0x24, 0x80,
	0xca, 0x9a, 0xf0, 0x1e, 0x0a, 0x34, 0x55, 0xc6, 0xad, 0x13, 0x1a, 0x33, 0x86, 0x2b, 0x04, 0x50,
	0x90, 0x94, 0x71, 0xc2, 0xb1, 0x74, 0xad, 0x81, 0x67, 0xda, 0x53, 0xbc, 0x41, 0x00, 0x2d, 0xcf,
	0x6b, 0xe5, 0x58, 0x6a, 0x44, 0xc6, 0x43, 0xc0, 0x7c, 0x5c, 0x25, 0x80, 0x6e, 0x24, 0x23, 0xea,
	0x47, 0x50, 0x5e, 0x7c, 0x57, 0xc1, 0x35, 0x02, 0xe8, 0x5a, 0x46, 0x7c, 0x57, 0x79, 0x22, 0xbe,
	0xab, 0xe0, 0x3a, 0x01, 0xb4, 0x9e, 0x15, 0x9f, 0xd9, 0x8a, 0xbb, 0x99, 0xa3, 0x07, 0x58, 0x26,
	0x80, 0x16, 0x92, 0x94, 0xa7, 0x11, 0x84, 0x0e, 0xa0, 0xe4, 0x87, 0x06, 0xde, 0x24, 0x80, 0x56,
	0x94, 0x66, 0xdc, 0xd8, 0x68, 0xe9, 0xda, 0xc3, 0xd0, 0xb0, 0x98, 0xef, 0xeb, 0x53, 0xa6, 0x45,
	0x0c, 0x74, 0x08, 0xeb, 0x1e, 0x73, 0x99, 0x1e, 0xb0, 0xdb, 0x64, 0x81, 0x10, 0x91, 0x68, 0xb5,
	0x5f, 0x90, 0x57, 0xb4, 0x5a, 0x62, 0x12, 0x6b, 0x94, 0x26, 0x8b, 0x96, 0x6c, 0x11, 0x89, 0x96,
	0xb3, 0x64, 0xd1, 0x18, 0x15, 0x6e, 0xcf, 0xc9, 0xae, 0x7e, 0xf3, 0x61, 0x91, 0xa0, 0x11, 0x25,
	0xd0, 0x1a, 0x89, 0xf5, 0x92, 0x1b, 0x45, 0x0a, 0x05, 0x36, 0xf3, 0x5e, 0x71, 0x91, 0x4d, 0x22,
	0xd1, 0x82, 0xb6, 0x95, 0x75, 0x8a, 0x8b, 0x5d, 0x92, 0x49, 0x4c, 0x75, 0x9b, 0x48, 0x14, 0xe4,
	0x33, 0x89, 0xe9, 0x1e, 0xc2, 0x4d, 0xc3, 0x9c, 0x8e, 0xed, 0xd0, 0x32, 0x98, 0x37, 0xbe, 0xd7,
	0x3d, 0xd3, 0x0e, 0xf0, 0x97, 0x09, 0xff, 0x31, 0xea, 0x86, 0x39, 0xbd, 0xe0, 0x86, 0x6b, 0x8e,
	0xa3, 0x23, 0x88, 0x52, 0xe4, 0x64, 0x3c, 0x5f, 0x27, 0x7c, 0x8e, 0xf2, 0x9c, 0x9d, 0x8c, 0x72,
	0x09, 0xbd, 0xa7, 0xe2, 0x6f, 0x13, 0xbe, 0xb3, 0x39, 0x7a, 0x4f, 0xcd, 0x49, 0x11, 0x9d, 0xfd,
	0x3e, 0xe1, 0xdb, 0xb6, 0x90, 0x12, 0xf7, 0x75, 0xe7, 0x07, 0x80, 0x70, 0x31, 0x45, 0xb4, 0x0d,
	0x4b, 0xb1, 0x1f, 0xbf, 0x1f, 0x65, 0x4d, 0xbc, 0xd0, 0x1e, 0x2c, 0x06, 0x0f, 0x2e, 0xe3, 0x27,
	0xe3, 0xe9, 0xbf, 0xc5, 0x6d, 0xe8, 0x18, 0x16, 0xfd, 0xd0, 0x88, 0x4f, 0x46, 0x45, 0xd9, 0x5d,
	0xba, 0x26, 0xa9, 0x4f, 0x45, 0xe3, 0xf4, 0x9d, 0x7d, 0x58, 0x49, 0x81, 0xa8, 0x01, 0x57, 0xef,
	0xf5, 0x59, 0xc8, 0xf0, 0xff, 0xfc, 0xf2, 0xc4, 0x8f, 0x17, 0x53, 0xb8, 0x9e, 0x64, 0x43, 0xff,
	0xc1, 0xe6, 0xe0, 0x62, 0x74, 0x3e, 0xbe, 0x7a, 0x7b, 0x39, 0x18, 0x8f, 0x2e, 0x86, 0x97, 0x83,
	0xd7, 0x67, 0xa7, 0x67, 0x83, 0x13, 0x79, 0x05, 0x35, 0xa0, 0xbc, 0x30, 0x5d, 0xbf, 0x7a, 0x33,
	0x1a, 0xbc, 0x94, 0xc1, 0x12, 0x54, 0x91, 0x0b, 0x4b, 0xd0, 0xae, 0x2c, 0xf5, 0x8f, 0x7f, 0x3e,
	0xb6, 0xc0, 0xaf, 0xc7, 0x16, 0xf8, 0xfd, 0xd8, 0x02, 0x9f, 0xff, 0xb4, 0x56, 0xde, 0xed, 0x4f,
	0xcd, 0xe0, 0x7d, 0x68, 0xb4, 0x6f, 0x1c, 0xab, 0xe3, 0xce, 0xc2, 0xc0, 0x39, 0xb2, 0x58, 0xe0,
	0x99, 0x37, 0x7e, 0xc7, 0xd3, 0x3f, 0xba, 0x46, 0x27, 0x2a, 0xd3, 0x28, 0xf1, 0x9b, 0xdc, 0xfd,
	0x17, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x7d, 0x50, 0x91, 0xa1, 0x05, 0x00, 0x00,
}

func (m *Main) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Main) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Main) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BigNumberString) > 0 {
		i -= len(m.BigNumberString)
		copy(dAtA[i:], m.BigNumberString)
		i = encodeVarintTest(dAtA, i, uint64(len(m.BigNumberString)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x81
		i--
		dAtA[i] = 0xe2
	}
	if m.BigNumberFixed64 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.BigNumberFixed64))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x81
		i--
		dAtA[i] = 0xd9
	}
	if m.BigNumberFixed32 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.BigNumberFixed32))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x81
		i--
		dAtA[i] = 0xd5
	}
	if m.BigNumberVarint != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.BigNumberVarint))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x81
		i--
		dAtA[i] = 0xc8
	}
	if len(m.RepeatedPackedDouble) > 0 {
		for iNdEx := len(m.RepeatedPackedDouble) - 1; iNdEx >= 0; iNdEx-- {
			f1 := math.Float64bits(float64(m.RepeatedPackedDouble[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f1))
		}
		i = encodeVarintTest(dAtA, i, uint64(len(m.RepeatedPackedDouble)*8))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.RepeatedPackedFloat) > 0 {
		for iNdEx := len(m.RepeatedPackedFloat) - 1; iNdEx >= 0; iNdEx-- {
			f2 := math.Float32bits(float32(m.RepeatedPackedFloat[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f2))
		}
		i = encodeVarintTest(dAtA, i, uint64(len(m.RepeatedPackedFloat)*4))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.RepeatedPackedUint32) > 0 {
		dAtA4 := make([]byte, len(m.RepeatedPackedUint32)*10)
		var j3 int
		for _, num := range m.RepeatedPackedUint32 {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintTest(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.RepeatedString) > 0 {
		for iNdEx := len(m.RepeatedString) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RepeatedString[iNdEx])
			copy(dAtA[i:], m.RepeatedString[iNdEx])
			i = encodeVarintTest(dAtA, i, uint64(len(m.RepeatedString[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.RepeatedUint32) > 0 {
		for iNdEx := len(m.RepeatedUint32) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintTest(dAtA, i, uint64(m.RepeatedUint32[iNdEx]))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x90
		}
	}
	if m.Sub != nil {
		{
			size, err := m.Sub.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.SimpleFloat != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SimpleFloat))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x85
	}
	if m.SimpleSfixed32 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.SimpleSfixed32))
		i--
		dAtA[i] = 0x7d
	}
	if m.SimpleFixed32 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.SimpleFixed32))
		i--
		dAtA[i] = 0x75
	}
	if len(m.SimpleBytes) > 0 {
		i -= len(m.SimpleBytes)
		copy(dAtA[i:], m.SimpleBytes)
		i = encodeVarintTest(dAtA, i, uint64(len(m.SimpleBytes)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.SimpleString) > 0 {
		i -= len(m.SimpleString)
		copy(dAtA[i:], m.SimpleString)
		i = encodeVarintTest(dAtA, i, uint64(len(m.SimpleString)))
		i--
		dAtA[i] = 0x62
	}
	if m.SimpleDouble != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.SimpleDouble))))
		i--
		dAtA[i] = 0x59
	}
	if m.SimpleSfixed64 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.SimpleSfixed64))
		i--
		dAtA[i] = 0x51
	}
	if m.SimpleFixed64 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.SimpleFixed64))
		i--
		dAtA[i] = 0x49
	}
	if m.SimpleEnum != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.SimpleEnum))
		i--
		dAtA[i] = 0x40
	}
	if m.SimpleBool {
		i--
		if m.SimpleBool {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.SimpleSint64 != 0 {
		i = encodeVarintTest(dAtA, i, uint64((uint64(m.SimpleSint64)<<1)^uint64((m.SimpleSint64>>63))))
		i--
		dAtA[i] = 0x30
	}
	if m.SimpleSint32 != 0 {
		i = encodeVarintTest(dAtA, i, uint64((uint32(m.SimpleSint32)<<1)^uint32((m.SimpleSint32>>31))))
		i--
		dAtA[i] = 0x28
	}
	if m.SimpleUint64 != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.SimpleUint64))
		i--
		dAtA[i] = 0x20
	}
	if m.SimpleUint32 != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.SimpleUint32))
		i--
		dAtA[i] = 0x18
	}
	if m.SimpleInt64 != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.SimpleInt64))
		i--
		dAtA[i] = 0x10
	}
	if m.SimpleInt32 != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.SimpleInt32))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Main_Submessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Main_Submessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Main_Submessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sub2 != nil {
		{
			size, err := m.Sub2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Number) > 0 {
		i -= len(m.Number)
		copy(dAtA[i:], m.Number)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Number)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Main_Submessage_Submessage2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Main_Submessage_Submessage2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Main_Submessage_Submessage2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	return len(dAtA) - i, nil
}

func encodeVarintTest(dAtA []byte, offset int, v uint64) int {
	offset -= sovTest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Main) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SimpleInt32 != 0 {
		n += 1 + sovTest(uint64(m.SimpleInt32))
	}
	if m.SimpleInt64 != 0 {
		n += 1 + sovTest(uint64(m.SimpleInt64))
	}
	if m.SimpleUint32 != 0 {
		n += 1 + sovTest(uint64(m.SimpleUint32))
	}
	if m.SimpleUint64 != 0 {
		n += 1 + sovTest(uint64(m.SimpleUint64))
	}
	if m.SimpleSint32 != 0 {
		n += 1 + sozTest(uint64(m.SimpleSint32))
	}
	if m.SimpleSint64 != 0 {
		n += 1 + sozTest(uint64(m.SimpleSint64))
	}
	if m.SimpleBool {
		n += 2
	}
	if m.SimpleEnum != 0 {
		n += 1 + sovTest(uint64(m.SimpleEnum))
	}
	if m.SimpleFixed64 != 0 {
		n += 9
	}
	if m.SimpleSfixed64 != 0 {
		n += 9
	}
	if m.SimpleDouble != 0 {
		n += 9
	}
	l = len(m.SimpleString)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.SimpleBytes)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.SimpleFixed32 != 0 {
		n += 5
	}
	if m.SimpleSfixed32 != 0 {
		n += 5
	}
	if m.SimpleFloat != 0 {
		n += 6
	}
	if m.Sub != nil {
		l = m.Sub.Size()
		n += 2 + l + sovTest(uint64(l))
	}
	if len(m.RepeatedUint32) > 0 {
		for _, e := range m.RepeatedUint32 {
			n += 2 + sovTest(uint64(e))
		}
	}
	if len(m.RepeatedString) > 0 {
		for _, s := range m.RepeatedString {
			l = len(s)
			n += 2 + l + sovTest(uint64(l))
		}
	}
	if len(m.RepeatedPackedUint32) > 0 {
		l = 0
		for _, e := range m.RepeatedPackedUint32 {
			l += sovTest(uint64(e))
		}
		n += 2 + sovTest(uint64(l)) + l
	}
	if len(m.RepeatedPackedFloat) > 0 {
		n += 2 + sovTest(uint64(len(m.RepeatedPackedFloat)*4)) + len(m.RepeatedPackedFloat)*4
	}
	if len(m.RepeatedPackedDouble) > 0 {
		n += 2 + sovTest(uint64(len(m.RepeatedPackedDouble)*8)) + len(m.RepeatedPackedDouble)*8
	}
	if m.BigNumberVarint != 0 {
		n += 3 + sovTest(uint64(m.BigNumberVarint))
	}
	if m.BigNumberFixed32 != 0 {
		n += 7
	}
	if m.BigNumberFixed64 != 0 {
		n += 11
	}
	l = len(m.BigNumberString)
	if l > 0 {
		n += 3 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Main_Submessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Number)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovTest(uint64(m.Type))
	}
	if m.Sub2 != nil {
		l = m.Sub2.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Main_Submessage_Submessage2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 2 + sovTest(uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTest(x uint64) (n int) {
	return sovTest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Main) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Main: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Main: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleInt32", wireType)
			}
			m.SimpleInt32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SimpleInt32 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleInt64", wireType)
			}
			m.SimpleInt64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SimpleInt64 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleUint32", wireType)
			}
			m.SimpleUint32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SimpleUint32 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleUint64", wireType)
			}
			m.SimpleUint64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SimpleUint64 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleSint32", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SimpleSint32 = v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleSint64", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.SimpleSint64 = int64(v)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleBool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SimpleBool = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleEnum", wireType)
			}
			m.SimpleEnum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SimpleEnum |= EnumType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleFixed64", wireType)
			}
			m.SimpleFixed64 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.SimpleFixed64 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleSfixed64", wireType)
			}
			m.SimpleSfixed64 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.SimpleSfixed64 = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleDouble", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.SimpleDouble = float64(math.Float64frombits(v))
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SimpleString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SimpleBytes = append(m.SimpleBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.SimpleBytes == nil {
				m.SimpleBytes = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleFixed32", wireType)
			}
			m.SimpleFixed32 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.SimpleFixed32 = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 15:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleSfixed32", wireType)
			}
			m.SimpleSfixed32 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.SimpleSfixed32 = int32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 16:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleFloat", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SimpleFloat = float32(math.Float32frombits(v))
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sub", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sub == nil {
				m.Sub = &Main_Submessage{}
			}
			if err := m.Sub.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RepeatedUint32 = append(m.RepeatedUint32, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RepeatedUint32) == 0 {
					m.RepeatedUint32 = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RepeatedUint32 = append(m.RepeatedUint32, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedUint32", wireType)
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepeatedString = append(m.RepeatedString, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 20:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RepeatedPackedUint32 = append(m.RepeatedPackedUint32, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RepeatedPackedUint32) == 0 {
					m.RepeatedPackedUint32 = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RepeatedPackedUint32 = append(m.RepeatedPackedUint32, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedPackedUint32", wireType)
			}
		case 21:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.RepeatedPackedFloat = append(m.RepeatedPackedFloat, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.RepeatedPackedFloat) == 0 {
					m.RepeatedPackedFloat = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.RepeatedPackedFloat = append(m.RepeatedPackedFloat, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedPackedFloat", wireType)
			}
		case 22:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.RepeatedPackedDouble = append(m.RepeatedPackedDouble, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.RepeatedPackedDouble) == 0 {
					m.RepeatedPackedDouble = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.RepeatedPackedDouble = append(m.RepeatedPackedDouble, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedPackedDouble", wireType)
			}
		case 12313:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigNumberVarint", wireType)
			}
			m.BigNumberVarint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BigNumberVarint |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12314:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigNumberFixed32", wireType)
			}
			m.BigNumberFixed32 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.BigNumberFixed32 = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 12315:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigNumberFixed64", wireType)
			}
			m.BigNumberFixed64 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.BigNumberFixed64 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 12316:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigNumberString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BigNumberString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Main_Submessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Submessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Submessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= EnumType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sub2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sub2 == nil {
				m.Sub2 = &Main_Submessage_Submessage2{}
			}
			if err := m.Sub2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Main_Submessage_Submessage2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Submessage2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Submessage2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTest = fmt.Errorf("proto: unexpected end of group")
)
